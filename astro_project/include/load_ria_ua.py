import os
import time
import requests
from datetime import datetime
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi


def get_mongo_collection(collection_name):
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
    URI –∏ –ø–∞—Ä–æ–ª—å –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    uri = f"mongodb+srv://afedotova1974:{os.environ['db_password']}@cluster0.le9nhy1.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
    client = MongoClient(uri, server_api=ServerApi("1"))
    client.admin.command("ping")
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_name}")
    return client["trailer"][collection_name]


def load_trailers_by_bodystyle(
        collection,
        bodystyles,
        group_name="trailers",
        year=2023,             # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2023
        quarter=None,
        month_range=None,
        log_col=None,
        max_pages=3,
        delay=0.5
):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ø–∏—Å–∫—É bodystyles –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥ –∏ –∫–≤–∞—Ä—Ç–∞–ª.
    –ü–∏—à–µ—Ç –ª–æ–≥–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é log_col (MongoDB).

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - collection: –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (MongoDB)
    - bodystyles: —Å–ø–∏—Å–æ–∫ id bodystyle –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    - group_name: "trailers" –∏–ª–∏ "semitrailers"
    - year: –≥–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ (int)
    - quarter: –∫–≤–∞—Ä—Ç–∞–ª (1..4) –∏–ª–∏ None
    - month_range: –∫–æ—Ä—Ç–µ–∂ (start_month, end_month), –µ—Å–ª–∏ None ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –≥–æ–¥–∞–º
    - log_col: –∫–æ–ª–ª–µ–∫—Ü–∏—è MongoDB –¥–ª—è –ª–æ–≥–æ–≤
    - max_pages: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å API
    - delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    """
    api_key = os.environ.get("api_key_ria")
    if not api_key:
        raise ValueError("‚ùå api_key_ria –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    start_time = time.time()
    total_loaded = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞
    s_yers = year
    po_yers = year

    print(f"üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ {group_name} –∑–∞ {year}, –∫–≤–∞—Ä—Ç–∞–ª {quarter if quarter else '–≤–µ—Å—å –≥–æ–¥'}")

    for body_id in bodystyles:
        loaded = 0
        seen_ids = set()
        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ bodystyle {body_id}")

        for page in range(max_pages):
            params = {
                "api_key": api_key,
                "category_id": 5,
                "bodystyle": body_id,
                "s_yers": s_yers,
                "po_yers": po_yers,
                "with_price": 1,
                "countpage": 20,
                "page": page
            }
            r = requests.get("https://developers.ria.com/auto/search", params=params)
            if r.status_code != 200:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ search: {r.status_code}")
                break

            ids = r.json().get("result", {}).get("search_result", {}).get("ids", [])
            if not ids:
                print("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É bodystyle")
                break

            for auto_id in ids:
                if auto_id in seen_ids:
                    continue
                info_resp = requests.get("https://developers.ria.com/auto/info",
                                         params={"api_key": api_key, "auto_id": auto_id})
                if info_resp.status_code == 200:
                    doc = info_resp.json()
                    doc["_id"] = int(auto_id)
                    doc["source"] = "AUTO.RIA"
                    doc["country"] = "UA"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É
                    doc["ingested_at"] = datetime.utcnow()
                    doc["year_loaded"] = year
                    doc["quarter_loaded"] = quarter
                    try:
                        collection.replace_one({"_id": doc["_id"]}, doc, upsert=True)
                        loaded += 1
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ID {auto_id}: {e}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ info –¥–ª—è ID {auto_id}: {info_resp.status_code}")
                time.sleep(delay)
                seen_ids.add(auto_id)

        print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded} –¥–ª—è bodystyle {body_id}")
        total_loaded += loaded

    elapsed = time.time() - start_time
    print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded} –∑–∞–ø–∏—Å–µ–π –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ –≤ MongoDB
    if log_col is not None:
        log_doc = {
            "group_name": group_name,
            "year": year,
            "quarter": quarter,
            "month_range": month_range,
            "total_loaded": total_loaded,
            "elapsed_seconds": elapsed,
            "source": "RIA_UA",
            "country": "UA",
            "loaded_at": datetime.utcnow()
        }
        try:
            log_col.insert_one(log_doc)
            print("üìù –õ–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∞–Ω –≤ MongoDB")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")
